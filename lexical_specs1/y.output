State 35 conflicts: 7 reduce/reduce
State 36 conflicts: 7 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: chunks exps

    2 chunks: chunk ";" chunks
    3       | /* empty */

    4 chunk: tydec
    5      | vardec

    6 vardec: "var" ID ":=" rvalue
    7       | "var" ID ":" ty
    8       | "var" ID ":" ty ":=" rvalue

    9 tydec: "type" ID "=" ty

   10 ty: type_id
   11   | "array of" type_id "[" NUMCONST "]"
   12   | ID

   13 type_id: "int"
   14        | "str"
   15        | "bool"
   16        | "float"

   17 exps: exp
   18     | exp ";" exps
   19     | /* empty */

   20 exp: lvalue ":=" rvalue
   21    | "(" exps ")"
   22    | "if" rvalue "then" exp
   23    | "if" rvalue "then" exp "else" exp
   24    | "while" rvalue "do" exp
   25    | "break"

   26 rvalue: binops
   27       | lvalue
   28       | consts

   29 binops: "-" binops
   30       | fexp "=" binops
   31       | fexp "<>" binops
   32       | fexp ">" binops
   33       | fexp "<" binops
   34       | fexp "+" binops
   35       | fexp "-" binops
   36       | fexp

   37 fexp: texp "*" fexp
   38     | texp "/" fexp
   39     | texp

   40 texp: "(" rvalue ")"
   41     | lvalue
   42     | consts

   43 lvalue: ID "[" rvalue "]"
   44       | ID

   45 consts: "nil"
   46       | NUMCONST
   47       | STRCONST
   48       | FLOATCONST


Terminals, with rules where they appear

$end (0) 0
error (256)
"nil" (258) 45
ID (259) 6 7 8 9 12 43 44
NUMCONST (260) 11 46
STRCONST (261) 47
FLOATCONST (262) 48
";" (263) 2 18
":" (264) 7 8
"(" (265) 21 40
")" (266) 21 40
"[" (267) 11 43
"]" (268) 11 43
"+" (269) 34
"-" (270) 29 35
"*" (271) 37
"/" (272) 38
"=" (273) 9 30
"<>" (274) 31
">" (275) 32
"<" (276) 33
":=" (277) 6 8 20
"var" (278) 6 7 8
"type" (279) 9
"array of" (280) 11
"int" (281) 13
"float" (282) 16
"str" (283) 14
"bool" (284) 15
"while" (285) 24
"do" (286) 24
"if" (287) 22 23
"then" (288) 22 23
"else" (289) 23
"break" (290) 25


Nonterminals, with rules where they appear

$accept (36)
    on left: 0
program (37)
    on left: 1, on right: 0
chunks (38)
    on left: 2 3, on right: 1 2
chunk (39)
    on left: 4 5, on right: 2
vardec (40)
    on left: 6 7 8, on right: 5
tydec (41)
    on left: 9, on right: 4
ty (42)
    on left: 10 11 12, on right: 7 8 9
type_id (43)
    on left: 13 14 15 16, on right: 10 11
exps (44)
    on left: 17 18 19, on right: 1 18 21
exp (45)
    on left: 20 21 22 23 24 25, on right: 17 18 22 23 24
rvalue (46)
    on left: 26 27 28, on right: 6 8 20 22 23 24 40 43
binops (47)
    on left: 29 30 31 32 33 34 35 36, on right: 26 29 30 31 32 33 34
    35
fexp (48)
    on left: 37 38 39, on right: 30 31 32 33 34 35 36 37 38
texp (49)
    on left: 40 41 42, on right: 37 38 39
lvalue (50)
    on left: 43 44, on right: 20 27 41
consts (51)
    on left: 45 46 47 48, on right: 28 42


state 0

    0 $accept: . program $end
    1 program: . chunks exps
    2 chunks: . chunk ";" chunks
    3       | .  [$end, ID, "(", "while", "if", "break"]
    4 chunk: . tydec
    5      | . vardec
    6 vardec: . "var" ID ":=" rvalue
    7       | . "var" ID ":" ty
    8       | . "var" ID ":" ty ":=" rvalue
    9 tydec: . "type" ID "=" ty

    "var"   shift, and go to state 1
    "type"  shift, and go to state 2

    $default  reduce using rule 3 (chunks)

    program  go to state 3
    chunks   go to state 4
    chunk    go to state 5
    vardec   go to state 6
    tydec    go to state 7


state 1

    6 vardec: "var" . ID ":=" rvalue
    7       | "var" . ID ":" ty
    8       | "var" . ID ":" ty ":=" rvalue

    ID  shift, and go to state 8


state 2

    9 tydec: "type" . ID "=" ty

    ID  shift, and go to state 9


state 3

    0 $accept: program . $end

    $end  shift, and go to state 10


state 4

    1 program: chunks . exps
   17 exps: . exp
   18     | . exp ";" exps
   19     | .  [$end]
   20 exp: . lvalue ":=" rvalue
   21    | . "(" exps ")"
   22    | . "if" rvalue "then" exp
   23    | . "if" rvalue "then" exp "else" exp
   24    | . "while" rvalue "do" exp
   25    | . "break"
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID

    ID       shift, and go to state 11
    "("      shift, and go to state 12
    "while"  shift, and go to state 13
    "if"     shift, and go to state 14
    "break"  shift, and go to state 15

    $default  reduce using rule 19 (exps)

    exps    go to state 16
    exp     go to state 17
    lvalue  go to state 18


state 5

    2 chunks: chunk . ";" chunks

    ";"  shift, and go to state 19


state 6

    5 chunk: vardec .

    $default  reduce using rule 5 (chunk)


state 7

    4 chunk: tydec .

    $default  reduce using rule 4 (chunk)


state 8

    6 vardec: "var" ID . ":=" rvalue
    7       | "var" ID . ":" ty
    8       | "var" ID . ":" ty ":=" rvalue

    ":"   shift, and go to state 20
    ":="  shift, and go to state 21


state 9

    9 tydec: "type" ID . "=" ty

    "="  shift, and go to state 22


state 10

    0 $accept: program $end .

    $default  accept


state 11

   43 lvalue: ID . "[" rvalue "]"
   44       | ID .  [$end, ";", ")", "]", "+", "-", "*", "/", "=", "<>", ">", "<", ":=", "do", "then", "else"]

    "["  shift, and go to state 23

    $default  reduce using rule 44 (lvalue)


state 12

   17 exps: . exp
   18     | . exp ";" exps
   19     | .  [")"]
   20 exp: . lvalue ":=" rvalue
   21    | . "(" exps ")"
   21    | "(" . exps ")"
   22    | . "if" rvalue "then" exp
   23    | . "if" rvalue "then" exp "else" exp
   24    | . "while" rvalue "do" exp
   25    | . "break"
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID

    ID       shift, and go to state 11
    "("      shift, and go to state 12
    "while"  shift, and go to state 13
    "if"     shift, and go to state 14
    "break"  shift, and go to state 15

    $default  reduce using rule 19 (exps)

    exps    go to state 24
    exp     go to state 17
    lvalue  go to state 18


state 13

   24 exp: "while" . rvalue "do" exp
   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 31
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 14

   22 exp: "if" . rvalue "then" exp
   23    | "if" . rvalue "then" exp "else" exp
   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 37
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 15

   25 exp: "break" .

    $default  reduce using rule 25 (exp)


state 16

    1 program: chunks exps .

    $default  reduce using rule 1 (program)


state 17

   17 exps: exp .  [$end, ")"]
   18     | exp . ";" exps

    ";"  shift, and go to state 38

    $default  reduce using rule 17 (exps)


state 18

   20 exp: lvalue . ":=" rvalue

    ":="  shift, and go to state 39


state 19

    2 chunks: . chunk ";" chunks
    2       | chunk ";" . chunks
    3       | .  [$end, ID, "(", "while", "if", "break"]
    4 chunk: . tydec
    5      | . vardec
    6 vardec: . "var" ID ":=" rvalue
    7       | . "var" ID ":" ty
    8       | . "var" ID ":" ty ":=" rvalue
    9 tydec: . "type" ID "=" ty

    "var"   shift, and go to state 1
    "type"  shift, and go to state 2

    $default  reduce using rule 3 (chunks)

    chunks  go to state 40
    chunk   go to state 5
    vardec  go to state 6
    tydec   go to state 7


state 20

    7 vardec: "var" ID ":" . ty
    8       | "var" ID ":" . ty ":=" rvalue
   10 ty: . type_id
   11   | . "array of" type_id "[" NUMCONST "]"
   12   | . ID
   13 type_id: . "int"
   14        | . "str"
   15        | . "bool"
   16        | . "float"

    ID          shift, and go to state 41
    "array of"  shift, and go to state 42
    "int"       shift, and go to state 43
    "float"     shift, and go to state 44
    "str"       shift, and go to state 45
    "bool"      shift, and go to state 46

    ty       go to state 47
    type_id  go to state 48


state 21

    6 vardec: "var" ID ":=" . rvalue
   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 49
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 22

    9 tydec: "type" ID "=" . ty
   10 ty: . type_id
   11   | . "array of" type_id "[" NUMCONST "]"
   12   | . ID
   13 type_id: . "int"
   14        | . "str"
   15        | . "bool"
   16        | . "float"

    ID          shift, and go to state 41
    "array of"  shift, and go to state 42
    "int"       shift, and go to state 43
    "float"     shift, and go to state 44
    "str"       shift, and go to state 45
    "bool"      shift, and go to state 46

    ty       go to state 50
    type_id  go to state 48


state 23

   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   43       | ID "[" . rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 51
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 24

   21 exp: "(" exps . ")"

    ")"  shift, and go to state 52


state 25

   45 consts: "nil" .

    $default  reduce using rule 45 (consts)


state 26

   46 consts: NUMCONST .

    $default  reduce using rule 46 (consts)


state 27

   47 consts: STRCONST .

    $default  reduce using rule 47 (consts)


state 28

   48 consts: FLOATCONST .

    $default  reduce using rule 48 (consts)


state 29

   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   40     | "(" . rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 53
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 30

   29 binops: . "-" binops
   29       | "-" . binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 54
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 31

   24 exp: "while" rvalue . "do" exp

    "do"  shift, and go to state 57


state 32

   26 rvalue: binops .

    $default  reduce using rule 26 (rvalue)


state 33

   30 binops: fexp . "=" binops
   31       | fexp . "<>" binops
   32       | fexp . ">" binops
   33       | fexp . "<" binops
   34       | fexp . "+" binops
   35       | fexp . "-" binops
   36       | fexp .  [$end, ";", ")", "]", "do", "then", "else"]

    "+"   shift, and go to state 58
    "-"   shift, and go to state 59
    "="   shift, and go to state 60
    "<>"  shift, and go to state 61
    ">"   shift, and go to state 62
    "<"   shift, and go to state 63

    $default  reduce using rule 36 (binops)


state 34

   37 fexp: texp . "*" fexp
   38     | texp . "/" fexp
   39     | texp .  [$end, ";", ")", "]", "+", "-", "=", "<>", ">", "<", "do", "then", "else"]

    "*"  shift, and go to state 64
    "/"  shift, and go to state 65

    $default  reduce using rule 39 (fexp)


state 35

   27 rvalue: lvalue .  [$end, ";", ")", "]", "do", "then", "else"]
   41 texp: lvalue .  [$end, ";", ")", "]", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]

    $end      reduce using rule 27 (rvalue)
    $end      [reduce using rule 41 (texp)]
    ";"       reduce using rule 27 (rvalue)
    ";"       [reduce using rule 41 (texp)]
    ")"       reduce using rule 27 (rvalue)
    ")"       [reduce using rule 41 (texp)]
    "]"       reduce using rule 27 (rvalue)
    "]"       [reduce using rule 41 (texp)]
    "do"      reduce using rule 27 (rvalue)
    "do"      [reduce using rule 41 (texp)]
    "then"    reduce using rule 27 (rvalue)
    "then"    [reduce using rule 41 (texp)]
    "else"    reduce using rule 27 (rvalue)
    "else"    [reduce using rule 41 (texp)]
    $default  reduce using rule 41 (texp)


state 36

   28 rvalue: consts .  [$end, ";", ")", "]", "do", "then", "else"]
   42 texp: consts .  [$end, ";", ")", "]", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]

    $end      reduce using rule 28 (rvalue)
    $end      [reduce using rule 42 (texp)]
    ";"       reduce using rule 28 (rvalue)
    ";"       [reduce using rule 42 (texp)]
    ")"       reduce using rule 28 (rvalue)
    ")"       [reduce using rule 42 (texp)]
    "]"       reduce using rule 28 (rvalue)
    "]"       [reduce using rule 42 (texp)]
    "do"      reduce using rule 28 (rvalue)
    "do"      [reduce using rule 42 (texp)]
    "then"    reduce using rule 28 (rvalue)
    "then"    [reduce using rule 42 (texp)]
    "else"    reduce using rule 28 (rvalue)
    "else"    [reduce using rule 42 (texp)]
    $default  reduce using rule 42 (texp)


state 37

   22 exp: "if" rvalue . "then" exp
   23    | "if" rvalue . "then" exp "else" exp

    "then"  shift, and go to state 66


state 38

   17 exps: . exp
   18     | . exp ";" exps
   18     | exp ";" . exps
   19     | .  [$end, ")"]
   20 exp: . lvalue ":=" rvalue
   21    | . "(" exps ")"
   22    | . "if" rvalue "then" exp
   23    | . "if" rvalue "then" exp "else" exp
   24    | . "while" rvalue "do" exp
   25    | . "break"
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID

    ID       shift, and go to state 11
    "("      shift, and go to state 12
    "while"  shift, and go to state 13
    "if"     shift, and go to state 14
    "break"  shift, and go to state 15

    $default  reduce using rule 19 (exps)

    exps    go to state 67
    exp     go to state 17
    lvalue  go to state 18


state 39

   20 exp: lvalue ":=" . rvalue
   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 68
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 40

    2 chunks: chunk ";" chunks .

    $default  reduce using rule 2 (chunks)


state 41

   12 ty: ID .

    $default  reduce using rule 12 (ty)


state 42

   11 ty: "array of" . type_id "[" NUMCONST "]"
   13 type_id: . "int"
   14        | . "str"
   15        | . "bool"
   16        | . "float"

    "int"    shift, and go to state 43
    "float"  shift, and go to state 44
    "str"    shift, and go to state 45
    "bool"   shift, and go to state 46

    type_id  go to state 69


state 43

   13 type_id: "int" .

    $default  reduce using rule 13 (type_id)


state 44

   16 type_id: "float" .

    $default  reduce using rule 16 (type_id)


state 45

   14 type_id: "str" .

    $default  reduce using rule 14 (type_id)


state 46

   15 type_id: "bool" .

    $default  reduce using rule 15 (type_id)


state 47

    7 vardec: "var" ID ":" ty .  [";"]
    8       | "var" ID ":" ty . ":=" rvalue

    ":="  shift, and go to state 70

    $default  reduce using rule 7 (vardec)


state 48

   10 ty: type_id .

    $default  reduce using rule 10 (ty)


state 49

    6 vardec: "var" ID ":=" rvalue .

    $default  reduce using rule 6 (vardec)


state 50

    9 tydec: "type" ID "=" ty .

    $default  reduce using rule 9 (tydec)


state 51

   43 lvalue: ID "[" rvalue . "]"

    "]"  shift, and go to state 71


state 52

   21 exp: "(" exps ")" .

    $default  reduce using rule 21 (exp)


state 53

   40 texp: "(" rvalue . ")"

    ")"  shift, and go to state 72


state 54

   29 binops: "-" binops .

    $default  reduce using rule 29 (binops)


state 55

   41 texp: lvalue .

    $default  reduce using rule 41 (texp)


state 56

   42 texp: consts .

    $default  reduce using rule 42 (texp)


state 57

   20 exp: . lvalue ":=" rvalue
   21    | . "(" exps ")"
   22    | . "if" rvalue "then" exp
   23    | . "if" rvalue "then" exp "else" exp
   24    | . "while" rvalue "do" exp
   24    | "while" rvalue "do" . exp
   25    | . "break"
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID

    ID       shift, and go to state 11
    "("      shift, and go to state 12
    "while"  shift, and go to state 13
    "if"     shift, and go to state 14
    "break"  shift, and go to state 15

    exp     go to state 73
    lvalue  go to state 18


state 58

   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   34       | fexp "+" . binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 74
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 59

   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   35       | fexp "-" . binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 75
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 60

   29 binops: . "-" binops
   30       | . fexp "=" binops
   30       | fexp "=" . binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 76
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 61

   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   31       | fexp "<>" . binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 77
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 62

   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   32       | fexp ">" . binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 78
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 63

   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   33       | fexp "<" . binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    binops  go to state 79
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 64

   37 fexp: . texp "*" fexp
   37     | texp "*" . fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29

    fexp    go to state 80
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 65

   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   38     | texp "/" . fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29

    fexp    go to state 81
    texp    go to state 34
    lvalue  go to state 55
    consts  go to state 56


state 66

   20 exp: . lvalue ":=" rvalue
   21    | . "(" exps ")"
   22    | . "if" rvalue "then" exp
   22    | "if" rvalue "then" . exp
   23    | . "if" rvalue "then" exp "else" exp
   23    | "if" rvalue "then" . exp "else" exp
   24    | . "while" rvalue "do" exp
   25    | . "break"
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID

    ID       shift, and go to state 11
    "("      shift, and go to state 12
    "while"  shift, and go to state 13
    "if"     shift, and go to state 14
    "break"  shift, and go to state 15

    exp     go to state 82
    lvalue  go to state 18


state 67

   18 exps: exp ";" exps .

    $default  reduce using rule 18 (exps)


state 68

   20 exp: lvalue ":=" rvalue .

    $default  reduce using rule 20 (exp)


state 69

   11 ty: "array of" type_id . "[" NUMCONST "]"

    "["  shift, and go to state 83


state 70

    8 vardec: "var" ID ":" ty ":=" . rvalue
   26 rvalue: . binops
   27       | . lvalue
   28       | . consts
   29 binops: . "-" binops
   30       | . fexp "=" binops
   31       | . fexp "<>" binops
   32       | . fexp ">" binops
   33       | . fexp "<" binops
   34       | . fexp "+" binops
   35       | . fexp "-" binops
   36       | . fexp
   37 fexp: . texp "*" fexp
   38     | . texp "/" fexp
   39     | . texp
   40 texp: . "(" rvalue ")"
   41     | . lvalue
   42     | . consts
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID
   45 consts: . "nil"
   46       | . NUMCONST
   47       | . STRCONST
   48       | . FLOATCONST

    "nil"       shift, and go to state 25
    ID          shift, and go to state 11
    NUMCONST    shift, and go to state 26
    STRCONST    shift, and go to state 27
    FLOATCONST  shift, and go to state 28
    "("         shift, and go to state 29
    "-"         shift, and go to state 30

    rvalue  go to state 84
    binops  go to state 32
    fexp    go to state 33
    texp    go to state 34
    lvalue  go to state 35
    consts  go to state 36


state 71

   43 lvalue: ID "[" rvalue "]" .

    $default  reduce using rule 43 (lvalue)


state 72

   40 texp: "(" rvalue ")" .

    $default  reduce using rule 40 (texp)


state 73

   24 exp: "while" rvalue "do" exp .

    $default  reduce using rule 24 (exp)


state 74

   34 binops: fexp "+" binops .

    $default  reduce using rule 34 (binops)


state 75

   35 binops: fexp "-" binops .

    $default  reduce using rule 35 (binops)


state 76

   30 binops: fexp "=" binops .

    $default  reduce using rule 30 (binops)


state 77

   31 binops: fexp "<>" binops .

    $default  reduce using rule 31 (binops)


state 78

   32 binops: fexp ">" binops .

    $default  reduce using rule 32 (binops)


state 79

   33 binops: fexp "<" binops .

    $default  reduce using rule 33 (binops)


state 80

   37 fexp: texp "*" fexp .

    $default  reduce using rule 37 (fexp)


state 81

   38 fexp: texp "/" fexp .

    $default  reduce using rule 38 (fexp)


state 82

   22 exp: "if" rvalue "then" exp .  [$end, ";", ")"]
   23    | "if" rvalue "then" exp . "else" exp

    "else"  shift, and go to state 85

    $default  reduce using rule 22 (exp)

    Conflict between rule 22 and token "else" resolved as shift (%right "else").


state 83

   11 ty: "array of" type_id "[" . NUMCONST "]"

    NUMCONST  shift, and go to state 86


state 84

    8 vardec: "var" ID ":" ty ":=" rvalue .

    $default  reduce using rule 8 (vardec)


state 85

   20 exp: . lvalue ":=" rvalue
   21    | . "(" exps ")"
   22    | . "if" rvalue "then" exp
   23    | . "if" rvalue "then" exp "else" exp
   23    | "if" rvalue "then" exp "else" . exp
   24    | . "while" rvalue "do" exp
   25    | . "break"
   43 lvalue: . ID "[" rvalue "]"
   44       | . ID

    ID       shift, and go to state 11
    "("      shift, and go to state 12
    "while"  shift, and go to state 13
    "if"     shift, and go to state 14
    "break"  shift, and go to state 15

    exp     go to state 87
    lvalue  go to state 18


state 86

   11 ty: "array of" type_id "[" NUMCONST . "]"

    "]"  shift, and go to state 88


state 87

   23 exp: "if" rvalue "then" exp "else" exp .

    $default  reduce using rule 23 (exp)


state 88

   11 ty: "array of" type_id "[" NUMCONST "]" .

    $default  reduce using rule 11 (ty)
