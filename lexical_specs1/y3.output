CHANGELOG:
Just introduced binops
before rvalue production thought of

Nonterminals useless in grammar

   chunks
   chunk
   vardec
   tydec
   ty
   type_id


Terminals unused in grammar

   "var"
   "type"


Rules useless in grammar

   33 program: chunks

   34 chunks: chunk chunks

   35 chunk: tydec chunk
   36      | vardec

   37 vardec: "var" ID ":=" exp

   38 tydec: "type" ID "=" ty

   39 ty: type_id

   40 type_id: ID


State 1 conflicts: 15 reduce/reduce
State 3 conflicts: 15 reduce/reduce
State 4 conflicts: 15 reduce/reduce
State 13 conflicts: 1 shift/reduce
State 14 conflicts: 15 reduce/reduce
State 17 conflicts: 1 shift/reduce
State 53 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exps: exp
    3     | exp ";" exp exps
    4     | /* empty */

    5 exp: "nil"
    6    | NUMCONST
    7    | STRCONST
    8    | lvalue
    9    | lvalue ":=" exp
   10    | "-" binops
   11    | binops
   12    | "(" exps ")"
   13    | "if" exp "then" exp ctrl_else
   14    | "while" exp "do" exp
   15    | "break"

   16 ctrl_else: "else" exp
   17          | /* empty */

   18 binops: fexp "+" binops
   19       | fexp "-" binops
   20       | fexp "=" binops
   21       | fexp "<>" binops
   22       | fexp ">" binops
   23       | fexp "<" binops
   24       | fexp

   25 fexp: fexp "*" fexp
   26     | fexp "/" fexp
   27     | "(" binops ")"
   28     | lvalue
   29     | "nil"
   30     | NUMCONST
   31     | STRCONST

   32 lvalue: ID


Terminals, with rules where they appear

$end (0) 0
error (256)
"nil" (258) 5 29
ID (259) 32
NUMCONST (260) 6 30
STRCONST (261) 7 31
";" (262) 3
"(" (263) 12 27
")" (264) 12 27
"+" (265) 18
"-" (266) 10 19
"*" (267) 25
"/" (268) 26
"=" (269) 20
"<>" (270) 21
">" (271) 22
"<" (272) 23
":=" (273) 9
"var" (274)
"type" (275)
"while" (276) 14
"do" (277) 14
"if" (278) 13
"then" (279) 13
"else" (280) 16
"break" (281) 15


Nonterminals, with rules where they appear

$accept (27)
    on left: 0
program (28)
    on left: 1, on right: 0
exps (29)
    on left: 2 3 4, on right: 3 12
exp (30)
    on left: 5 6 7 8 9 10 11 12 13 14 15, on right: 1 2 3 9 13 14 16
ctrl_else (31)
    on left: 16 17, on right: 13
binops (32)
    on left: 18 19 20 21 22 23 24, on right: 10 11 18 19 20 21 22 23
    27
fexp (33)
    on left: 25 26 27 28 29 30 31, on right: 18 19 20 21 22 23 24 25
    26
lvalue (34)
    on left: 32, on right: 8 9 28


state 0

    0 $accept: . program $end
    1 program: . exp
    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    program  go to state 10
    exp      go to state 11
    binops   go to state 12
    fexp     go to state 13
    lvalue   go to state 14


state 1

    5 exp: "nil" .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "-", "while", "do", "if", "then", "else", "break"]
   29 fexp: "nil" .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "+", "-", "*", "/", "=", "<>", ">", "<", "while", "do", "if", "then", "else", "break"]

    $end      reduce using rule 5 (exp)
    $end      [reduce using rule 29 (fexp)]
    "nil"     reduce using rule 5 (exp)
    "nil"     [reduce using rule 29 (fexp)]
    ID        reduce using rule 5 (exp)
    ID        [reduce using rule 29 (fexp)]
    NUMCONST  reduce using rule 5 (exp)
    NUMCONST  [reduce using rule 29 (fexp)]
    STRCONST  reduce using rule 5 (exp)
    STRCONST  [reduce using rule 29 (fexp)]
    ";"       reduce using rule 5 (exp)
    ";"       [reduce using rule 29 (fexp)]
    "("       reduce using rule 5 (exp)
    "("       [reduce using rule 29 (fexp)]
    ")"       reduce using rule 5 (exp)
    ")"       [reduce using rule 29 (fexp)]
    "+"       reduce using rule 29 (fexp)
    "-"       reduce using rule 5 (exp)
    "-"       [reduce using rule 29 (fexp)]
    "*"       reduce using rule 29 (fexp)
    "/"       reduce using rule 29 (fexp)
    "="       reduce using rule 29 (fexp)
    "<>"      reduce using rule 29 (fexp)
    ">"       reduce using rule 29 (fexp)
    "<"       reduce using rule 29 (fexp)
    "while"   reduce using rule 5 (exp)
    "while"   [reduce using rule 29 (fexp)]
    "do"      reduce using rule 5 (exp)
    "do"      [reduce using rule 29 (fexp)]
    "if"      reduce using rule 5 (exp)
    "if"      [reduce using rule 29 (fexp)]
    "then"    reduce using rule 5 (exp)
    "then"    [reduce using rule 29 (fexp)]
    "else"    reduce using rule 5 (exp)
    "else"    [reduce using rule 29 (fexp)]
    "break"   reduce using rule 5 (exp)
    "break"   [reduce using rule 29 (fexp)]
    $default  reduce using rule 5 (exp)


state 2

   32 lvalue: ID .

    $default  reduce using rule 32 (lvalue)


state 3

    6 exp: NUMCONST .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "-", "while", "do", "if", "then", "else", "break"]
   30 fexp: NUMCONST .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "+", "-", "*", "/", "=", "<>", ">", "<", "while", "do", "if", "then", "else", "break"]

    $end      reduce using rule 6 (exp)
    $end      [reduce using rule 30 (fexp)]
    "nil"     reduce using rule 6 (exp)
    "nil"     [reduce using rule 30 (fexp)]
    ID        reduce using rule 6 (exp)
    ID        [reduce using rule 30 (fexp)]
    NUMCONST  reduce using rule 6 (exp)
    NUMCONST  [reduce using rule 30 (fexp)]
    STRCONST  reduce using rule 6 (exp)
    STRCONST  [reduce using rule 30 (fexp)]
    ";"       reduce using rule 6 (exp)
    ";"       [reduce using rule 30 (fexp)]
    "("       reduce using rule 6 (exp)
    "("       [reduce using rule 30 (fexp)]
    ")"       reduce using rule 6 (exp)
    ")"       [reduce using rule 30 (fexp)]
    "+"       reduce using rule 30 (fexp)
    "-"       reduce using rule 6 (exp)
    "-"       [reduce using rule 30 (fexp)]
    "*"       reduce using rule 30 (fexp)
    "/"       reduce using rule 30 (fexp)
    "="       reduce using rule 30 (fexp)
    "<>"      reduce using rule 30 (fexp)
    ">"       reduce using rule 30 (fexp)
    "<"       reduce using rule 30 (fexp)
    "while"   reduce using rule 6 (exp)
    "while"   [reduce using rule 30 (fexp)]
    "do"      reduce using rule 6 (exp)
    "do"      [reduce using rule 30 (fexp)]
    "if"      reduce using rule 6 (exp)
    "if"      [reduce using rule 30 (fexp)]
    "then"    reduce using rule 6 (exp)
    "then"    [reduce using rule 30 (fexp)]
    "else"    reduce using rule 6 (exp)
    "else"    [reduce using rule 30 (fexp)]
    "break"   reduce using rule 6 (exp)
    "break"   [reduce using rule 30 (fexp)]
    $default  reduce using rule 6 (exp)


state 4

    7 exp: STRCONST .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "-", "while", "do", "if", "then", "else", "break"]
   31 fexp: STRCONST .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "+", "-", "*", "/", "=", "<>", ">", "<", "while", "do", "if", "then", "else", "break"]

    $end      reduce using rule 7 (exp)
    $end      [reduce using rule 31 (fexp)]
    "nil"     reduce using rule 7 (exp)
    "nil"     [reduce using rule 31 (fexp)]
    ID        reduce using rule 7 (exp)
    ID        [reduce using rule 31 (fexp)]
    NUMCONST  reduce using rule 7 (exp)
    NUMCONST  [reduce using rule 31 (fexp)]
    STRCONST  reduce using rule 7 (exp)
    STRCONST  [reduce using rule 31 (fexp)]
    ";"       reduce using rule 7 (exp)
    ";"       [reduce using rule 31 (fexp)]
    "("       reduce using rule 7 (exp)
    "("       [reduce using rule 31 (fexp)]
    ")"       reduce using rule 7 (exp)
    ")"       [reduce using rule 31 (fexp)]
    "+"       reduce using rule 31 (fexp)
    "-"       reduce using rule 7 (exp)
    "-"       [reduce using rule 31 (fexp)]
    "*"       reduce using rule 31 (fexp)
    "/"       reduce using rule 31 (fexp)
    "="       reduce using rule 31 (fexp)
    "<>"      reduce using rule 31 (fexp)
    ">"       reduce using rule 31 (fexp)
    "<"       reduce using rule 31 (fexp)
    "while"   reduce using rule 7 (exp)
    "while"   [reduce using rule 31 (fexp)]
    "do"      reduce using rule 7 (exp)
    "do"      [reduce using rule 31 (fexp)]
    "if"      reduce using rule 7 (exp)
    "if"      [reduce using rule 31 (fexp)]
    "then"    reduce using rule 7 (exp)
    "then"    [reduce using rule 31 (fexp)]
    "else"    reduce using rule 7 (exp)
    "else"    [reduce using rule 31 (fexp)]
    "break"   reduce using rule 7 (exp)
    "break"   [reduce using rule 31 (fexp)]
    $default  reduce using rule 7 (exp)


state 5

    2 exps: . exp
    3     | . exp ";" exp exps
    4     | .  [")"]
    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   12    | "(" . exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   27     | "(" . binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    $default  reduce using rule 4 (exps)

    exps    go to state 15
    exp     go to state 16
    binops  go to state 17
    fexp    go to state 13
    lvalue  go to state 14


state 6

   10 exp: "-" . binops
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 22
    fexp    go to state 13
    lvalue  go to state 23


state 7

    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   14    | "while" . exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 24
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 8

    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   13    | "if" . exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 25
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 9

   15 exp: "break" .

    $default  reduce using rule 15 (exp)


state 10

    0 $accept: program . $end

    $end  shift, and go to state 26


state 11

    1 program: exp .

    $default  reduce using rule 1 (program)


state 12

   11 exp: binops .

    $default  reduce using rule 11 (exp)


state 13

   18 binops: fexp . "+" binops
   19       | fexp . "-" binops
   20       | fexp . "=" binops
   21       | fexp . "<>" binops
   22       | fexp . ">" binops
   23       | fexp . "<" binops
   24       | fexp .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "-", "while", "do", "if", "then", "else", "break"]
   25 fexp: fexp . "*" fexp
   26     | fexp . "/" fexp

    "+"   shift, and go to state 27
    "-"   shift, and go to state 28
    "*"   shift, and go to state 29
    "/"   shift, and go to state 30
    "="   shift, and go to state 31
    "<>"  shift, and go to state 32
    ">"   shift, and go to state 33
    "<"   shift, and go to state 34

    "-"       [reduce using rule 24 (binops)]
    $default  reduce using rule 24 (binops)


state 14

    8 exp: lvalue .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "-", "while", "do", "if", "then", "else", "break"]
    9    | lvalue . ":=" exp
   28 fexp: lvalue .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "+", "-", "*", "/", "=", "<>", ">", "<", "while", "do", "if", "then", "else", "break"]

    ":="  shift, and go to state 35

    $end      reduce using rule 8 (exp)
    $end      [reduce using rule 28 (fexp)]
    "nil"     reduce using rule 8 (exp)
    "nil"     [reduce using rule 28 (fexp)]
    ID        reduce using rule 8 (exp)
    ID        [reduce using rule 28 (fexp)]
    NUMCONST  reduce using rule 8 (exp)
    NUMCONST  [reduce using rule 28 (fexp)]
    STRCONST  reduce using rule 8 (exp)
    STRCONST  [reduce using rule 28 (fexp)]
    ";"       reduce using rule 8 (exp)
    ";"       [reduce using rule 28 (fexp)]
    "("       reduce using rule 8 (exp)
    "("       [reduce using rule 28 (fexp)]
    ")"       reduce using rule 8 (exp)
    ")"       [reduce using rule 28 (fexp)]
    "+"       reduce using rule 28 (fexp)
    "-"       reduce using rule 8 (exp)
    "-"       [reduce using rule 28 (fexp)]
    "*"       reduce using rule 28 (fexp)
    "/"       reduce using rule 28 (fexp)
    "="       reduce using rule 28 (fexp)
    "<>"      reduce using rule 28 (fexp)
    ">"       reduce using rule 28 (fexp)
    "<"       reduce using rule 28 (fexp)
    "while"   reduce using rule 8 (exp)
    "while"   [reduce using rule 28 (fexp)]
    "do"      reduce using rule 8 (exp)
    "do"      [reduce using rule 28 (fexp)]
    "if"      reduce using rule 8 (exp)
    "if"      [reduce using rule 28 (fexp)]
    "then"    reduce using rule 8 (exp)
    "then"    [reduce using rule 28 (fexp)]
    "else"    reduce using rule 8 (exp)
    "else"    [reduce using rule 28 (fexp)]
    "break"   reduce using rule 8 (exp)
    "break"   [reduce using rule 28 (fexp)]
    $default  reduce using rule 8 (exp)


state 15

   12 exp: "(" exps . ")"

    ")"  shift, and go to state 36


state 16

    2 exps: exp .  [")"]
    3     | exp . ";" exp exps

    ";"  shift, and go to state 37

    $default  reduce using rule 2 (exps)


state 17

   11 exp: binops .  [";", ")"]
   27 fexp: "(" binops . ")"

    ")"  shift, and go to state 38

    ")"       [reduce using rule 11 (exp)]
    $default  reduce using rule 11 (exp)


state 18

   29 fexp: "nil" .

    $default  reduce using rule 29 (fexp)


state 19

   30 fexp: NUMCONST .

    $default  reduce using rule 30 (fexp)


state 20

   31 fexp: STRCONST .

    $default  reduce using rule 31 (fexp)


state 21

   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   27     | "(" . binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 39
    fexp    go to state 13
    lvalue  go to state 23


state 22

   10 exp: "-" binops .

    $default  reduce using rule 10 (exp)


state 23

   28 fexp: lvalue .

    $default  reduce using rule 28 (fexp)


state 24

   14 exp: "while" exp . "do" exp

    "do"  shift, and go to state 40


state 25

   13 exp: "if" exp . "then" exp ctrl_else

    "then"  shift, and go to state 41


state 26

    0 $accept: program $end .

    $default  accept


state 27

   18 binops: . fexp "+" binops
   18       | fexp "+" . binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 42
    fexp    go to state 13
    lvalue  go to state 23


state 28

   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   19       | fexp "-" . binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 43
    fexp    go to state 13
    lvalue  go to state 23


state 29

   25 fexp: . fexp "*" fexp
   25     | fexp "*" . fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    fexp    go to state 44
    lvalue  go to state 23


state 30

   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   26     | fexp "/" . fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    fexp    go to state 45
    lvalue  go to state 23


state 31

   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   20       | fexp "=" . binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 46
    fexp    go to state 13
    lvalue  go to state 23


state 32

   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   21       | fexp "<>" . binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 47
    fexp    go to state 13
    lvalue  go to state 23


state 33

   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   22       | fexp ">" . binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 48
    fexp    go to state 13
    lvalue  go to state 23


state 34

   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   23       | fexp "<" . binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 18
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 19
    STRCONST  shift, and go to state 20
    "("       shift, and go to state 21

    binops  go to state 49
    fexp    go to state 13
    lvalue  go to state 23


state 35

    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
    9    | lvalue ":=" . exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 50
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 36

   12 exp: "(" exps ")" .

    $default  reduce using rule 12 (exp)


state 37

    3 exps: exp ";" . exp exps
    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 51
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 38

   27 fexp: "(" binops ")" .

    $default  reduce using rule 27 (fexp)


state 39

   27 fexp: "(" binops . ")"

    ")"  shift, and go to state 38


state 40

    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   14    | "while" exp "do" . exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 52
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 41

    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   13    | "if" exp "then" . exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 53
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 42

   18 binops: fexp "+" binops .

    $default  reduce using rule 18 (binops)


state 43

   19 binops: fexp "-" binops .

    $default  reduce using rule 19 (binops)


state 44

   25 fexp: fexp . "*" fexp
   25     | fexp "*" fexp .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "+", "-", "*", "/", "=", "<>", ">", "<", "while", "do", "if", "then", "else", "break"]
   26     | fexp . "/" fexp

    $default  reduce using rule 25 (fexp)

    Conflict between rule 25 and token "*" resolved as reduce (%left "*").
    Conflict between rule 25 and token "/" resolved as reduce (%left "/").


state 45

   25 fexp: fexp . "*" fexp
   26     | fexp . "/" fexp
   26     | fexp "/" fexp .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "+", "-", "*", "/", "=", "<>", ">", "<", "while", "do", "if", "then", "else", "break"]

    $default  reduce using rule 26 (fexp)

    Conflict between rule 26 and token "*" resolved as reduce (%left "*").
    Conflict between rule 26 and token "/" resolved as reduce (%left "/").


state 46

   20 binops: fexp "=" binops .

    $default  reduce using rule 20 (binops)


state 47

   21 binops: fexp "<>" binops .

    $default  reduce using rule 21 (binops)


state 48

   22 binops: fexp ">" binops .

    $default  reduce using rule 22 (binops)


state 49

   23 binops: fexp "<" binops .

    $default  reduce using rule 23 (binops)


state 50

    9 exp: lvalue ":=" exp .

    $default  reduce using rule 9 (exp)


state 51

    2 exps: . exp
    3     | . exp ";" exp exps
    3     | exp ";" exp . exps
    4     | .  [")"]
    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    $default  reduce using rule 4 (exps)

    exps    go to state 54
    exp     go to state 16
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 52

   14 exp: "while" exp "do" exp .

    $default  reduce using rule 14 (exp)


state 53

   13 exp: "if" exp "then" exp . ctrl_else
   16 ctrl_else: . "else" exp
   17          | .  [$end, "nil", ID, NUMCONST, STRCONST, ";", "(", ")", "-", "while", "do", "if", "then", "else", "break"]

    "else"  shift, and go to state 55

    "else"    [reduce using rule 17 (ctrl_else)]
    $default  reduce using rule 17 (ctrl_else)

    ctrl_else  go to state 56


state 54

    3 exps: exp ";" exp exps .

    $default  reduce using rule 3 (exps)


state 55

    5 exp: . "nil"
    6    | . NUMCONST
    7    | . STRCONST
    8    | . lvalue
    9    | . lvalue ":=" exp
   10    | . "-" binops
   11    | . binops
   12    | . "(" exps ")"
   13    | . "if" exp "then" exp ctrl_else
   14    | . "while" exp "do" exp
   15    | . "break"
   16 ctrl_else: "else" . exp
   18 binops: . fexp "+" binops
   19       | . fexp "-" binops
   20       | . fexp "=" binops
   21       | . fexp "<>" binops
   22       | . fexp ">" binops
   23       | . fexp "<" binops
   24       | . fexp
   25 fexp: . fexp "*" fexp
   26     | . fexp "/" fexp
   27     | . "(" binops ")"
   28     | . lvalue
   29     | . "nil"
   30     | . NUMCONST
   31     | . STRCONST
   32 lvalue: . ID

    "nil"     shift, and go to state 1
    ID        shift, and go to state 2
    NUMCONST  shift, and go to state 3
    STRCONST  shift, and go to state 4
    "("       shift, and go to state 5
    "-"       shift, and go to state 6
    "while"   shift, and go to state 7
    "if"      shift, and go to state 8
    "break"   shift, and go to state 9

    exp     go to state 57
    binops  go to state 12
    fexp    go to state 13
    lvalue  go to state 14


state 56

   13 exp: "if" exp "then" exp ctrl_else .

    $default  reduce using rule 13 (exp)


state 57

   16 ctrl_else: "else" exp .

    $default  reduce using rule 16 (ctrl_else)
