Nonterminals useless in grammar

   chunks
   chunk
   vardec
   tydec
   ty
   type_id


Terminals unused in grammar

   ";"
   "var"
   "type"
   BREAK
   break


Rules useless in grammar

   26 program: chunks

   27 chunks: chunk chunks

   28 chunk: tydec chunk
   29      | vardec

   30 vardec: "var" ID ":=" exp

   31 tydec: "type" ID "=" ty

   32 ty: type_id

   33 type_id: ID


State 15 conflicts: 8 shift/reduce
State 32 conflicts: 8 shift/reduce
State 33 conflicts: 8 shift/reduce
State 34 conflicts: 8 shift/reduce
State 35 conflicts: 9 shift/reduce
State 38 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exps: exp
    3     | /* empty */

    4 exp: "nil"
    5    | INT
    6    | STR
    7    | lvalue
    8    | lvalue ":=" exp
    9    | "-" exp
   10    | exp op exp
   11    | "(" exps ")"
   12    | "if" exp "then" exp ctrl_else
   13    | "while" exp "do" exp
   14    | "break"

   15 ctrl_else: "else" exp
   16          | /* empty */

   17 lvalue: ID

   18 op: "+"
   19   | "-"
   20   | "*"
   21   | "/"
   22   | "="
   23   | "<>"
   24   | ">"
   25   | "<"


Terminals, with rules where they appear

$end (0) 0
error (256)
"nil" (258) 4
ID (259) 17
INT (260) 5
STR (261) 6
";" (262)
"(" (263) 11
")" (264) 11
"+" (265) 18
"-" (266) 9 19
"*" (267) 20
"/" (268) 21
"=" (269) 22
"<>" (270) 23
">" (271) 24
"<" (272) 25
":=" (273) 8
"var" (274)
"type" (275)
"while" (276) 13
"do" (277) 13
"if" (278) 12
"then" (279) 12
"else" (280) 15
BREAK (281)
break (282)
"break" (283) 14


Nonterminals, with rules where they appear

$accept (29)
    on left: 0
program (30)
    on left: 1, on right: 0
exps (31)
    on left: 2 3, on right: 11
exp (32)
    on left: 4 5 6 7 8 9 10 11 12 13 14, on right: 1 2 8 9 10 12 13
    15
ctrl_else (33)
    on left: 15 16, on right: 12
lvalue (34)
    on left: 17, on right: 7 8
op (35)
    on left: 18 19 20 21 22 23 24 25, on right: 10


state 0

    0 $accept: . program $end
    1 program: . exp
    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    program  go to state 10
    exp      go to state 11
    lvalue   go to state 12


state 1

    4 exp: "nil" .

    $default  reduce using rule 4 (exp)


state 2

   17 lvalue: ID .

    $default  reduce using rule 17 (lvalue)


state 3

    5 exp: INT .

    $default  reduce using rule 5 (exp)


state 4

    6 exp: STR .

    $default  reduce using rule 6 (exp)


state 5

    2 exps: . exp
    3     | .  [")"]
    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   11    | "(" . exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    $default  reduce using rule 3 (exps)

    exps    go to state 13
    exp     go to state 14
    lvalue  go to state 12


state 6

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
    9    | "-" . exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 15
    lvalue  go to state 12


state 7

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   13    | "while" . exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 16
    lvalue  go to state 12


state 8

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   12    | "if" . exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 17
    lvalue  go to state 12


state 9

   14 exp: "break" .

    $default  reduce using rule 14 (exp)


state 10

    0 $accept: program . $end

    $end  shift, and go to state 18


state 11

    1 program: exp .  [$end]
   10 exp: exp . op exp
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    $default  reduce using rule 1 (program)

    op  go to state 27


state 12

    7 exp: lvalue .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
    8    | lvalue . ":=" exp

    ":="  shift, and go to state 28

    $default  reduce using rule 7 (exp)


state 13

   11 exp: "(" exps . ")"

    ")"  shift, and go to state 29


state 14

    2 exps: exp .  [")"]
   10 exp: exp . op exp
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    $default  reduce using rule 2 (exps)

    op  go to state 27


state 15

    9 exp: "-" exp .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
   10    | exp . op exp
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    "+"       [reduce using rule 9 (exp)]
    "-"       [reduce using rule 9 (exp)]
    "*"       [reduce using rule 9 (exp)]
    "/"       [reduce using rule 9 (exp)]
    "="       [reduce using rule 9 (exp)]
    "<>"      [reduce using rule 9 (exp)]
    ">"       [reduce using rule 9 (exp)]
    "<"       [reduce using rule 9 (exp)]
    $default  reduce using rule 9 (exp)

    op  go to state 27


state 16

   10 exp: exp . op exp
   13    | "while" exp . "do" exp
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26
    "do"  shift, and go to state 30

    op  go to state 27


state 17

   10 exp: exp . op exp
   12    | "if" exp . "then" exp ctrl_else
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"     shift, and go to state 19
    "-"     shift, and go to state 20
    "*"     shift, and go to state 21
    "/"     shift, and go to state 22
    "="     shift, and go to state 23
    "<>"    shift, and go to state 24
    ">"     shift, and go to state 25
    "<"     shift, and go to state 26
    "then"  shift, and go to state 31

    op  go to state 27


state 18

    0 $accept: program $end .

    $default  accept


state 19

   18 op: "+" .

    $default  reduce using rule 18 (op)


state 20

   19 op: "-" .

    $default  reduce using rule 19 (op)


state 21

   20 op: "*" .

    $default  reduce using rule 20 (op)


state 22

   21 op: "/" .

    $default  reduce using rule 21 (op)


state 23

   22 op: "=" .

    $default  reduce using rule 22 (op)


state 24

   23 op: "<>" .

    $default  reduce using rule 23 (op)


state 25

   24 op: ">" .

    $default  reduce using rule 24 (op)


state 26

   25 op: "<" .

    $default  reduce using rule 25 (op)


state 27

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   10    | exp op . exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 32
    lvalue  go to state 12


state 28

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    8    | lvalue ":=" . exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 33
    lvalue  go to state 12


state 29

   11 exp: "(" exps ")" .

    $default  reduce using rule 11 (exp)


state 30

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   13    | "while" exp "do" . exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 34
    lvalue  go to state 12


state 31

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   12    | "if" exp "then" . exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 35
    lvalue  go to state 12


state 32

   10 exp: exp . op exp
   10    | exp op exp .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    "+"       [reduce using rule 10 (exp)]
    "-"       [reduce using rule 10 (exp)]
    "*"       [reduce using rule 10 (exp)]
    "/"       [reduce using rule 10 (exp)]
    "="       [reduce using rule 10 (exp)]
    "<>"      [reduce using rule 10 (exp)]
    ">"       [reduce using rule 10 (exp)]
    "<"       [reduce using rule 10 (exp)]
    $default  reduce using rule 10 (exp)

    op  go to state 27


state 33

    8 exp: lvalue ":=" exp .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
   10    | exp . op exp
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    "+"       [reduce using rule 8 (exp)]
    "-"       [reduce using rule 8 (exp)]
    "*"       [reduce using rule 8 (exp)]
    "/"       [reduce using rule 8 (exp)]
    "="       [reduce using rule 8 (exp)]
    "<>"      [reduce using rule 8 (exp)]
    ">"       [reduce using rule 8 (exp)]
    "<"       [reduce using rule 8 (exp)]
    $default  reduce using rule 8 (exp)

    op  go to state 27


state 34

   10 exp: exp . op exp
   13    | "while" exp "do" exp .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    "+"       [reduce using rule 13 (exp)]
    "-"       [reduce using rule 13 (exp)]
    "*"       [reduce using rule 13 (exp)]
    "/"       [reduce using rule 13 (exp)]
    "="       [reduce using rule 13 (exp)]
    "<>"      [reduce using rule 13 (exp)]
    ">"       [reduce using rule 13 (exp)]
    "<"       [reduce using rule 13 (exp)]
    $default  reduce using rule 13 (exp)

    op  go to state 27


state 35

   10 exp: exp . op exp
   12    | "if" exp "then" exp . ctrl_else
   15 ctrl_else: . "else" exp
   16          | .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"     shift, and go to state 19
    "-"     shift, and go to state 20
    "*"     shift, and go to state 21
    "/"     shift, and go to state 22
    "="     shift, and go to state 23
    "<>"    shift, and go to state 24
    ">"     shift, and go to state 25
    "<"     shift, and go to state 26
    "else"  shift, and go to state 36

    "+"       [reduce using rule 16 (ctrl_else)]
    "-"       [reduce using rule 16 (ctrl_else)]
    "*"       [reduce using rule 16 (ctrl_else)]
    "/"       [reduce using rule 16 (ctrl_else)]
    "="       [reduce using rule 16 (ctrl_else)]
    "<>"      [reduce using rule 16 (ctrl_else)]
    ">"       [reduce using rule 16 (ctrl_else)]
    "<"       [reduce using rule 16 (ctrl_else)]
    "else"    [reduce using rule 16 (ctrl_else)]
    $default  reduce using rule 16 (ctrl_else)

    ctrl_else  go to state 37
    op         go to state 27


state 36

    4 exp: . "nil"
    5    | . INT
    6    | . STR
    7    | . lvalue
    8    | . lvalue ":=" exp
    9    | . "-" exp
   10    | . exp op exp
   11    | . "(" exps ")"
   12    | . "if" exp "then" exp ctrl_else
   13    | . "while" exp "do" exp
   14    | . "break"
   15 ctrl_else: "else" . exp
   17 lvalue: . ID

    "nil"    shift, and go to state 1
    ID       shift, and go to state 2
    INT      shift, and go to state 3
    STR      shift, and go to state 4
    "("      shift, and go to state 5
    "-"      shift, and go to state 6
    "while"  shift, and go to state 7
    "if"     shift, and go to state 8
    "break"  shift, and go to state 9

    exp     go to state 38
    lvalue  go to state 12


state 37

   12 exp: "if" exp "then" exp ctrl_else .

    $default  reduce using rule 12 (exp)


state 38

   10 exp: exp . op exp
   15 ctrl_else: "else" exp .  [$end, ")", "+", "-", "*", "/", "=", "<>", ">", "<", "do", "then", "else"]
   18 op: . "+"
   19   | . "-"
   20   | . "*"
   21   | . "/"
   22   | . "="
   23   | . "<>"
   24   | . ">"
   25   | . "<"

    "+"   shift, and go to state 19
    "-"   shift, and go to state 20
    "*"   shift, and go to state 21
    "/"   shift, and go to state 22
    "="   shift, and go to state 23
    "<>"  shift, and go to state 24
    ">"   shift, and go to state 25
    "<"   shift, and go to state 26

    "+"       [reduce using rule 15 (ctrl_else)]
    "-"       [reduce using rule 15 (ctrl_else)]
    "*"       [reduce using rule 15 (ctrl_else)]
    "/"       [reduce using rule 15 (ctrl_else)]
    "="       [reduce using rule 15 (ctrl_else)]
    "<>"      [reduce using rule 15 (ctrl_else)]
    ">"       [reduce using rule 15 (ctrl_else)]
    "<"       [reduce using rule 15 (ctrl_else)]
    $default  reduce using rule 15 (ctrl_else)

    op  go to state 27
